# This stack sets up an API gateway with a lambda function. The endpoint can then be called by the
# customer.created and customer.updated Square webhook to add the user to instagram.


AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  LambdaFunctionsBucketName:
    Type: String
    Description: Bucket that the Lambda functions are deployed to
  PackageVersion:
    Type: String
    Description: Version of Python package to deploy

Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - 'sts:AssumeRole'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AWSLambdaExecute
      Policies:
      - PolicyName: ReadSecrets
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - secretsmanager:GetRandomPassword
            - secretsmanager:GetResourcePolicy
            - secretsmanager:GetSecretValue
            - secretsmanager:DescribeSecret
            - secretsmanager:ListSecretVersionIds
            - secretsmanager:ListSecrets
            - secretsmanager:BatchGetSecretValue
            Resource: '*'

  AddInstagramUserFunction:
    Type: AWS::Lambda::Function
    DependsOn:
    - LambdaRole
    Properties:
      FunctionName: AddInstagramUser
      Runtime: python3.11
      Role: !GetAtt LambdaRole.Arn
      Description: Adds new user to instagram
      Handler: add_update_user.handler
      Timeout: 30
      TracingConfig:
        Mode: Active
      Code:
        S3Bucket: !Ref LambdaFunctionsBucketName
        S3Key: pkg.zip
        S3ObjectVersion: !Ref PackageVersion

  ###############################
  #  API Gateway Authorization  #
  ###############################
  AuthorizeIPAddressFunction:
    Type: AWS::Lambda::Function
    DependsOn:
    - LambdaRole
    Properties:
      FunctionName: AuthorizeIPAddress
      Runtime: python3.11
      Role: !GetAtt LambdaRole.Arn
      Description: Check that the request is coming from square IP addresses.
      Handler: check_ip.handler
      Timeout: 5
      Code:
        S3Bucket: !Ref LambdaFunctionsBucketName
        S3Key: pkg.zip
        S3ObjectVersion: !Ref PackageVersion

  Authorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      Name: SquareIPFilter
      ApiId: !Ref HttpApi
      AuthorizerType: REQUEST
      AuthorizerPayloadFormatVersion: '2.0'
      AuthorizerCredentialsArn: !GetAtt LambdaRole.Arn
      EnableSimpleResponses: true
      AuthorizerUri: !Sub
      - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
      - lambdaArn: !GetAtt AuthorizeIPAddressFunction.Arn

  AddInstagramUserPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - HttpApi
    - AddInstagramUserFunction
    Properties:
      FunctionName: !Ref AddInstagramUserFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com

  #################
  #  API Gateway  #
  #################
  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Description: Endpoint for Square webhooks.
      Name: SquareIngress
      ProtocolType: HTTP

  AddInstagramUserIntegration:
    Type: 'AWS::ApiGatewayV2::Integration'
    DependsOn:
    - HttpApi
    - AddInstagramUserFunction
    Properties:
      ApiId: !Ref HttpApi
      Description: Lambda Add User
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt AddInstagramUserFunction.Arn
      IntegrationMethod: POST
      PayloadFormatVersion: '2.0'

  AddInstagramUserFunctionRoute:
    Type: AWS::ApiGatewayV2::Route
    DependsOn:
    - HttpApi
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: $default
      Target: !Join ['/', ['integrations', !Ref AddInstagramUserIntegration]]

  AddInstagramUserStage:
    Type: AWS::ApiGatewayV2::Stage
    DependsOn:
    - AddInstagramUserLogGroup
    - HttpApi
    Properties:
      StageName: AddInstagramUser
      Description: Stage for AddInstagramUser Webhook with logging.
      AutoDeploy: true
      ApiId: !Ref HttpApi
      AccessLogSettings:
        DestinationArn: !GetAtt AddInstagramUserLogGroup.Arn
        Format: $context.identity.sourceIp - - [$context.requestTime] "$context.httpMethod $context.routeKey $context.protocol" $context.status $context.responseLength $context.requestId $context.integrationErrorMessage

  AddInstagramUserLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: AddInstagramUser
      RetentionInDays: 7

  LambdaInvocationsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Errors in Lambda Function on AddInstagramUser
      AlarmName: LambdaInvocationsAlarm
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
      - Name: FunctionName
        Value: AddInstagramUserFunction
      - Name: Resource
        Value: AddInstagramUserFunction
      EvaluationPeriods: 1
      Namespace: AWS/Lambda
      MetricName: Errors
      Period: 300
      Statistic: Maximum
      Threshold: 0

  APIAddInstagramUserAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Errors from API on AddInstagramUser
      AlarmName: APIAddInstagramUserAlarm
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
      - Name: Stage
        Value: !Ref AddInstagramUserStage
      - Name: ApiId
        Value: !Ref HttpApi
      EvaluationPeriods: 1
      Namespace: AWS/ApiGateway
      MetricName: 5xx
      Period: 300
      Statistic: Maximum
      Threshold: 0

Outputs:
  WebhookAddress:
    Description: The address to configure Square webook
    Value: !Join ['/', [!GetAtt HttpApi.ApiEndpoint, !Ref AddInstagramUserStage]]
